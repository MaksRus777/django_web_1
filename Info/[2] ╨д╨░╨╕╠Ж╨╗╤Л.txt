## Объяснение созданных файлов

### Общие файлы и папки

`django_web_1` - `Папка` проект PyCharm
`dj_prg` - `Папка` проект Django
`dj_app` - `Папка` приложения Django
`migrations` - `Папка` `Не используем` Хранит временную информацию, позволяющую сопоставить БД со структурой данных в models.py.
`__init__.py` - `Не используем` Необходим для правильных импортов в будущем.
`static` - `Папка` со статичными файлами для сайта (.jpg, .css .js)
`templates` - `Папка` с шаблонами веб-страниц для сайта (.html)
`db.sqlite3` - Файл Базы данных (в нем вся БД, со всеми таблицами и полями)
`manage.py` - Отвечает за манипуляции с проектом (запуск, изменение БД и тд.)

### Файлы приложения Django

`admin.py` - Надстройки над админкой (касательно Моделей)
`apps.py` - `Не используем` Конфигурации и настройки приложения
`forms.py` - `Сложный` Интерфейс/Формы для страниц сайта (В этом файле мы описываем формы, из чего они состоят и как выглядят)
`models.py` - `Сложный` Создание моделей, грубо говоря таблиц, описывающих какие-то данные (описание полей для будущих элементов)
`tests.py` - `Не используем` Хранит по желанию какие-то тесты приложения.
`views.py` - `2 Важный` Логика страниц сайта. Хранит методы обработки пользовательских запросов, а так же генерацию ответа.

### Файлы проекта Django

`asgi.py` - `Не используем` Нужен для удобного размещения на хостинге
`wsgi.py` - `Не используем` Нужен для удобного размещения на хостинге
`settings.py` - Файл с главной настройкой всего проекта/сайта.
`urls.py` - `1 Важный` Создание маршрутов (привязка URL к методам их обработки в файле views.py)

# Структура веб-приложения (внутренняя работа базового сайта)

[1 шаг] `HTTP-запрос (Request)` - Клиент переходит по URL (тем самым делает запрос)
[2 шаг] `urls.py` - Находит связь URL с методом (функцией) для обработки.
[3 шаг] `views.py` - Логика + Cвязь **шаг 4** **шаг 5** и **шаг 6** (по желанию)
[4 шаг] `models.py` - Описание Моделей (из БД)
[5 шаг] `forms.py` - Описание Форм
[6 шаг] `templates` - Шаблоны HTML (в которые придет вся информация из предыдущих шагов)
[7 шаг] `HTTP-ответ (Response)` - Клиент получает ответ, в виде текстового HTML документа (в браузере HTML преобразуется в визуальный интерфейс)